{
  "hash": "5b6d18dc9b70236e8c8a3674fd0538bd",
  "result": {
    "markdown": "---\ntitle: \"Monthly Portland Neighborhood Offense Statistics\"\nauthor: \"Karol Orozco\"\ndate: \"04-21-2023\"\nimage: logo.jpeg\nformat:\n  html:\n    toc: true\n    toc-location: right\n    html-math-method: katex\noutput: html_document\ncode-fold: false\nexecute:\n  eval: false\ncategories: [R, RShiny, CSS]\n---\n\n\n![](logo.jpeg)\n\n## Purpose\n\nIn this project, I developed a Shiny application that analyzed Amazon products available in India. The dataset used in this project was obtained from [Kaggle](https://www.kaggle.com/datasets/lokeshparab/amazon-products-dataset?select=Amazon+Pharmacy.csv), and it presented several challenges during the development process. While I was not able to fix all the issues with the product categories due to time constraints, I focused on creating a concise and informative dashboard that displayed the categories with the highest average ratings and reviews.\n\nCompared to my previous Shiny app, this project was developed more efficiently, taking approximately 70% less time. Additionally, I was able to implement more advanced CSS theming than before, which improved the overall design of the application. While there are still additional features and visualizations that could be added to the app, I decided to leave them for others to explore in the future.\n\nOverall, this project was a challenging but rewarding experience that allowed me to build my skills in data analysis and Shiny app development.\n\n## Questions\n\n-   What is the average **rating** for each category and subcategory?\n\n-   What is the average **review** for each category and subcategory?\n\n<iframe src=\"https://bcervantesalvarez.shinyapps.io/AmazonProductApp/\" width=\"800\" height=\"800\" allowfullscreen>\n\n</iframe>\n\n[Fullscreen](https://bcervantesalvarez.shinyapps.io/AmazonProductApp/)\n\n## Load Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(lubridate)\nlibrary(viridis) \nlibrary(zoo)\nlibrary(DT)\nlibrary(shinythemes)\nlibrary(thematic)\nlibrary(bslib)\n```\n:::\n\n\n## Data Wrangling Multiple Datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ORIGINAL DATA WRANGLING \n\ndispatch_calls2023 <- read.csv(\"https://raw.githubusercontent.com/karolo89/Raw_Data/main/dispatchedcalls_opendata_2023_1.csv\")|>\n  select(-ReportDateTime)|>\n  mutate(Priority = as.factor(Priority))|>\n  mutate(FinalCallCategory = as.factor(FinalCallCategory)) |>\n  mutate(FinalCallGroup = as.factor(FinalCallGroup))|>\n  mutate(Neighborhood = as.factor(Neighborhood))|>\n  mutate(ReportMonthYear = mdy(ReportMonthYear))|>\n  mutate_if(is.character, as.double)|>\n  mutate(ResponseTime= ResponseTime_sec/60)|>\n  separate(\"ReportMonthYear\", c(\"Year\", \"Month\", \"Day\"), sep = \"-\")|>\n  select(-Day)|>\n  mutate(date= as.yearmon(paste(Year, Month), \"%Y %m\"))\n\ndispatch_calls2022 <-read.csv(\"https://raw.githubusercontent.com/karolo89/Raw_Data/main/dispatchedcalls_opendata_2022_0.csv\")|>\n  mutate(Priority = as.factor(Priority))|>\n  mutate(FinalCallCategory = as.factor(FinalCallCategory)) |>\n  mutate(FinalCallGroup = as.factor(FinalCallGroup))|>\n  mutate(Neighborhood = as.factor(Neighborhood))|>\n  mutate(ReportMonthYear = mdy(ReportMonthYear))|>\n  mutate_if(is.character, as.double)|>\n  mutate(ResponseTime= ResponseTime_sec/60)|>\n  separate(\"ReportMonthYear\", c(\"Year\", \"Month\", \"Day\"), sep = \"-\")|>\n  select(-Day)|>\n  mutate(date= as.yearmon(paste(Year, Month), \"%Y %m\"))\n\ncalls <- rbind(dispatch_calls2022, dispatch_calls2023)\n\nmonth_call <- calls |>\n  group_by(date, Year, FinalCallGroup)|>\n  filter(FinalCallGroup!= \"NULL\") |>\n  summarise(count = n()) |>\n  arrange(desc(count))|>\n  na.omit() |> \n  ungroup()\n\ngroup_month <- calls |>\n  group_by(date, FinalCallGroup)|>\n  summarise(num= n())|>\n  mutate(date= as.Date(date))|>\n  arrange(desc(num))|>\n  top_n(5) |>\n  ungroup()\n```\n:::\n\n\n### Color Theming\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- bs_theme(\n  version = 5,\n  bg = \"#FFFFFF\",\n  fg = \"#000000\",\n  primary = \"#0199F8\",\n  secondary = \"#FF374B\",\n  base_font = \"Maven Pro\"\n)\n\nthematic::thematic_shiny()\n```\n:::\n\n\n## Part 1: Shiny UI\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI for application \n# Define the user interface\nui <- fluidPage(theme = custom_theme,\n                # Application title\n                \n                titlePanel(\"Dispatched Calls for Service- Portland Police Bureau\"),\n                # sidebar\n                sidebarLayout(\n                  sidebarPanel(\n                    dateRangeInput(inputId = \"date\",\n                                   label   = \"Enter date\",\n                                   start   = \"2022-01-01\",\n                                   end     = \"2023-03-01\",\n                                   min     = \"2022-01-01\",\n                                   max     = \"2023-03-01\"),\n                    \n                    selectInput(inputId  = \"FinalCallGroup\",\n                                label    = \"Select Call Type\",\n                                choices  = group_month$FinalCallGroup,\n                                multiple = TRUE,\n                                selected = \"Disorder\"),\n                    plotOutput(\"density\")),\n                  # main panel\n                  mainPanel(\n                    plotOutput(outputId = \"plot\"),\n                    dataTableOutput(outputId = \"table\")\n                  )\n                )\n)\n```\n:::\n\n\n## Part 2: Shiny Server\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create server function\n\nserver <- function(input, output) {\n  GM <- reactive({ group_month |> \n      filter(date >= input$date[1], \n             date <= input$date[2]) |> \n      filter(FinalCallGroup == input$FinalCallGroup)\n  })\n  TC <- reactive({  calls |> \n      filter(FinalCallGroup == input$FinalCallGroup) |> \n      arrange(date)})\n  \n  output$plot <- renderPlot({\n    GM() |> \n      ggplot(aes(x= fct_rev(fct_reorder(FinalCallGroup, num)), y= num))+\n      geom_bar(stat = 'identity', aes(color=FinalCallGroup, fill= FinalCallGroup))+\n      \n      scale_y_continuous(labels = scales::number_format(scale = .001, suffix = \"K\"))+\n      \n      scale_color_viridis_d()+\n      scale_fill_viridis_d()+\n      \n      labs(title= \"Total Calls by Group, 2022-23\",\n           x=\"\",\n           y= \"\") +\n      theme_minimal()+\n      theme(\n            legend.position = \"none\",\n            panel.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            plot.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            legend.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"))\n  })\n  \n  output$table <- DT::renderDataTable({\n    TC() |> \n      datatable(options = list(scrollX = T))\n  })\n  output$density <- renderPlot({\n    TC() |> ggplot() + aes(y=ResponseTime, x=FinalCallGroup, color=FinalCallGroup) +\n      geom_boxplot()+\n      labs(title= \"Response Time by Call Type\",\n           x=\"\",\n           y= \"min\")+\n      theme(legend.position = \"none\")+\n      theme_minimal()+\n      theme(\n            legend.position = \"none\",\n            panel.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            plot.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            legend.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"))\n  })\n  \n}\n\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(showtext)\nlibrary(lubridate)\nlibrary(viridis) \nlibrary(zoo)\nlibrary(DT)\nlibrary(shinythemes)\nlibrary(thematic)\nlibrary(bslib)\n\n\ndispatch_calls2023 <- read.csv(\"https://raw.githubusercontent.com/karolo89/Raw_Data/main/dispatchedcalls_opendata_2023_1.csv\")|>\n  select(-ReportDateTime)|>\n  mutate(Priority = as.factor(Priority))|>\n  mutate(FinalCallCategory = as.factor(FinalCallCategory)) |>\n  mutate(FinalCallGroup = as.factor(FinalCallGroup))|>\n  mutate(Neighborhood = as.factor(Neighborhood))|>\n  mutate(ReportMonthYear = mdy(ReportMonthYear))|>\n  mutate_if(is.character, as.double)|>\n  mutate(ResponseTime= ResponseTime_sec/60)|>\n  separate(\"ReportMonthYear\", c(\"Year\", \"Month\", \"Day\"), sep = \"-\")|>\n  select(-Day)|>\n  mutate(date= as.yearmon(paste(Year, Month), \"%Y %m\"))\n\ndispatch_calls2022 <-read.csv(\"https://raw.githubusercontent.com/karolo89/Raw_Data/main/dispatchedcalls_opendata_2022_0.csv\")|>\n  mutate(Priority = as.factor(Priority))|>\n  mutate(FinalCallCategory = as.factor(FinalCallCategory)) |>\n  mutate(FinalCallGroup = as.factor(FinalCallGroup))|>\n  mutate(Neighborhood = as.factor(Neighborhood))|>\n  mutate(ReportMonthYear = mdy(ReportMonthYear))|>\n  mutate_if(is.character, as.double)|>\n  mutate(ResponseTime= ResponseTime_sec/60)|>\n  separate(\"ReportMonthYear\", c(\"Year\", \"Month\", \"Day\"), sep = \"-\")|>\n  select(-Day)|>\n  mutate(date= as.yearmon(paste(Year, Month), \"%Y %m\"))\n\ncalls <- rbind(dispatch_calls2022, dispatch_calls2023)\n\nmonth_call <- calls |>\n  group_by(date, Year, FinalCallGroup)|>\n  filter(FinalCallGroup!= \"NULL\") |>\n  summarise(count = n()) |>\n  arrange(desc(count))|>\n  na.omit() |> \n  ungroup()\n\ngroup_month <- calls |>\n  group_by(date, FinalCallGroup)|>\n  summarise(num= n())|>\n  mutate(date= as.Date(date))|>\n  arrange(desc(num))|>\n  top_n(5) |>\n  ungroup()\n\n\n\ncustom_theme <- bs_theme(\n  version = 5,\n  bg = \"#FFFFFF\",\n  fg = \"#000000\",\n  primary = \"#0199F8\",\n  secondary = \"#FF374B\",\n  base_font = \"Maven Pro\"\n)\n\nthematic::thematic_shiny()\n\n\n\n# Define the user interface\nui <- fluidPage(theme = custom_theme,\n                # Application title\n                \n                titlePanel(\"Dispatched Calls for Service- Portland Police Bureau\"),\n                # sidebar\n                sidebarLayout(\n                  sidebarPanel(\n                    dateRangeInput(inputId = \"date\",\n                                   label   = \"Enter date\",\n                                   start   = \"2022-01-01\",\n                                   end     = \"2023-03-01\",\n                                   min     = \"2022-01-01\",\n                                   max     = \"2023-03-01\"),\n                    \n                    selectInput(inputId  = \"FinalCallGroup\",\n                                label    = \"Select Call Type\",\n                                choices  = group_month$FinalCallGroup,\n                                multiple = TRUE,\n                                selected = \"Disorder\"),\n                    plotOutput(\"density\")),\n                  # main panel\n                  mainPanel(\n                    plotOutput(outputId = \"plot\"),\n                    dataTableOutput(outputId = \"table\")\n                  )\n                )\n)\n\n\n# Create server function\n\nserver <- function(input, output) {\n  GM <- reactive({ group_month |> \n      filter(date >= input$date[1], \n             date <= input$date[2]) |> \n      filter(FinalCallGroup == input$FinalCallGroup)\n  })\n  TC <- reactive({  calls |> \n      filter(FinalCallGroup == input$FinalCallGroup) |> \n      arrange(date)})\n  \n  output$plot <- renderPlot({\n    GM() |> \n      ggplot(aes(x= fct_rev(fct_reorder(FinalCallGroup, num)), y= num))+\n      geom_bar(stat = 'identity', aes(color=FinalCallGroup, fill= FinalCallGroup))+\n      \n      scale_y_continuous(labels = scales::number_format(scale = .001, suffix = \"K\"))+\n      \n      scale_color_viridis_d()+\n      scale_fill_viridis_d()+\n      \n      labs(title= \"Total Calls by Group, 2022-23\",\n           x=\"\",\n           y= \"\") +\n      theme_minimal()+\n      theme(\n            legend.position = \"none\",\n            panel.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            plot.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            legend.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"))\n  })\n  \n  output$table <- DT::renderDataTable({\n    TC() |> \n      datatable(options = list(scrollX = T))\n  })\n  output$density <- renderPlot({\n    TC() |> ggplot() + aes(y=ResponseTime, x=FinalCallGroup, color=FinalCallGroup) +\n      geom_boxplot()+\n      labs(title= \"Response Time by Call Type\",\n           x=\"\",\n           y= \"min\")+\n      theme(legend.position = \"none\")+\n      theme_minimal()+\n      theme(\n            legend.position = \"none\",\n            panel.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            plot.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n            legend.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"))\n  })\n  \n}\n\n\n# Build and run the application\nrun_with_themer(shinyApp(ui = ui, server = server))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}