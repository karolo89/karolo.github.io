{
  "hash": "b160895615c34c99d8643ba4e4f8b257",
  "result": {
    "markdown": "---\ntitle: \"Dispatched Calls for Service\"\nauthor: \"Karol Orozco\"\ndate: \"04-23-2023\"\nimage: logo.jpeg\nformat:\n  html:\n    toc: true\n    toc-location: right\n    html-math-method: katex\noutput: html_document\ncode-fold: false\nexecute:\n  eval: false\ncategories: [R, RShiny, CSS]\n---\n\n\n![](logo.jpeg)\n\n## Purpose\n\nThis project aims to create a basic Shiny App with calls for services statistics from the Portland Police Bureau. \n\nLaw enforcement agencies use calls for service statistics to track and report the level of police activity in a specific area during a given time frame. These statistics are divided into dispatched calls, generated by the community through a call or text to 911 or the non-emergency line, and self-initiated/directed calls, which are officer-initiated calls for service. \n\nThe Portland Police Bureau counts all calls for service where at least one officer was dispatched or self-initiated a call, and these statistics focus on total police response. The dispatcher assigns each call for service a call type based on the preliminary nature of the call, and call types are categorized into one of eight call groups for reporting purposes.  These call types may not be descriptive of the potential kind of crime but rather a description of the situation.\n\n\n\n\n\n\n\n\n\n### Color Theming\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- bs_theme(\n  version = 5,\n  bg = \"#FFFFFF\",\n  fg = \"#000000\",\n  primary = \"#0199F8\",\n  secondary = \"#FF374B\",\n  base_font = \"Maven Pro\"\n)\n```\n:::\n\n\n## Shiny UI\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Libraries\n\n## library(shiny)\n## library(bslib)\n\n# Define the user interface\nui <- fluidPage(theme = custom_theme,\n                # Application title\n                \n                titlePanel(\"Dispatched Calls for Service- Portland Police Bureau\"),\n                # sidebar\n                sidebarLayout(\n                  sidebarPanel(\n                    dateRangeInput(inputId = \"date\",\n                                   label   = \"Enter date\",\n                                   start   = \"2022-01-01\",\n                                   end     = \"2023-03-01\",\n                                   min     = \"2022-01-01\",\n                                   max     = \"2023-03-01\"),\n                    \n                    selectInput(inputId  = \"FinalCallGroup\",\n                                label    = \"Select Call Type\",\n                                choices  = group_month$FinalCallGroup,\n                                multiple = TRUE,\n                                selected = \"Disorder\"),\n                    plotOutput(\"density\")),\n                  \n                  # main panel\n                  mainPanel(\n                    br(),\n                    br(),\n                    plotOutput(outputId = \"plot\"),\n                    br(),\n                    br(),\n                    \n                    dataTableOutput(outputId = \"table\")\n                  )\n                )\n)\n```\n:::\n\n\n## Shiny Server\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create server function\n\nserver <- function(input, output) {\n  \n  GM <- reactive({ group_month |> \n      filter(date >= input$date[1], \n             date <= input$date[2]) |> \n      filter(FinalCallGroup == input$FinalCallGroup)\n  })\n  \n  TC <- reactive({  calls |> \n      filter(FinalCallGroup == input$FinalCallGroup) |> \n      arrange(date)})\n  \n  output$plot <- renderPlot({\n    GM() |> \n      ggplot(aes(x= fct_rev(fct_reorder(FinalCallGroup, num)), y= num))+\n      geom_bar(stat = 'identity', aes(color=FinalCallGroup, fill= FinalCallGroup))+\n      scale_y_continuous(labels = scales::number_format(scale = .001, suffix = \"K\"))+\n      \n      scale_color_manual(values = c(\"Disorder\" = \"#ae4358\", \n                                    \"Crime\"= \"#0c2127\", \n                                    \"Traffic \"= \"#5c83a5\",\n                                    \"Alarm\" = \"#334940\",\n                                    \"Assist\"= \"#d4bba3\",\n                                    \"Civil\"= \"#764432\",\n                                    \"Other\"= \"#f1e6b9\",\n                                    \"Community Policing\"= \"#a2c8ec\"))+\n      scale_fill_manual(values = c(\"Disorder\" = \"#ae4358\", \n                                   \"Crime\"= \"#0c2127\", \n                                   \"Traffic \"= \"#5c83a5\",\n                                   \"Alarm\" = \"#334940\",\n                                   \"Assist\"= \"#d4bba3\",\n                                   \"Civil\"= \"#764432\",\n                                   \"Other\"= \"#f1e6b9\",\n                                   \"Community Policing\"= \"#a2c8ec\"))+\n      labs(title= \"Total Calls by Group, 2022-23\",\n           x=\"\",\n           y= \"\") +\n      theme_minimal()+\n      theme(\n        axis.text = element_text(size= 14),\n        title =element_text(size=20, face='bold'),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n        plot.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n        legend.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"))\n  })\n  \n  output$table <- DT::renderDataTable({\n    TC() |> \n      datatable(options = list(scrollX = T))\n  })\n  \n  output$density <- renderPlot({\n    \n    TC() |> ggplot() + aes(y=ResponseTime, x=FinalCallGroup, fill=FinalCallGroup) +\n      geom_boxplot()+\n      labs(title= \"Response Time (min) by Call Type\",\n           x=\"\",\n           y= \" \")+\n      scale_fill_manual(values = c(\"Disorder\" = \"#ae4358\", \n                                    \"Crime\"= \"#0c2127\", \n                                    \"Traffic \"= \"#5c83a5\",\n                                    \"Alarm\" = \"#334940\",\n                                    \"Assist\"= \"#d4bba3\",\n                                    \"Civil\"= \"#764432\",\n                                    \"Other\"= \"#f1e6b9\",\n                                    \"Community Policing\"= \"#a2c8ec\"))+\n      theme(legend.position = \"none\")+\n      theme_minimal()+\n      theme(\n        title =element_text(size=20, face='bold'),\n        axis.text = element_text(size= 14),\n        legend.position = \"none\",\n        panel.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n        plot.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"),\n        legend.background = element_rect(colour = \"#fdf8ec\", fill = \"#fdf8ec\"))\n  })\n  \n}\n\n\n# Build and run the application\nrun_with_themer(shinyApp(ui = ui, server = server))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}