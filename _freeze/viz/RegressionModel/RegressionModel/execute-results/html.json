{
  "hash": "2e92f1aafc788159001ab63b1d5a5ffb",
  "result": {
    "markdown": "---\ntitle: \"House Prices in Portland, OR\"\nauthor: \"Karol Orozco\"\ndate: \"2022-12\"\nimage: \"house_price.jpg\"\n---\n\n\n## Background\n\nThe goal is to build a classification model to predict the type of median housing prices in Portland, OR and its metropolitan area.\n\n\n\n\n\n## Get the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_pdx <- read.csv(\"https://raw.githubusercontent.com/karolo89/Raw_Data/main/PORTLAND%20HOUSE.csv\", stringsAsFactors=TRUE)\n```\n:::\n\n\n## Prepare the Data\n\nThis data has 25731 obs. of 32 variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## raw_pdx <- raw_pdx%>%select(-id)\n\nhead(raw_pdx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  id yearBuilt     City latitude longitude zipcode bathrooms bedrooms\n1  1      2007 Fairview 45.54357 -122.4418   97024         3        3\n2  2      2001 Fairview 45.54758 -122.4532   97024         3        3\n3  3      1982  Gresham 45.48823 -122.4444   97080         3        4\n4  4      1953 Portland 45.52663 -122.4641   97230         1        3\n5  5      1967  Gresham 45.51124 -122.4315   97030         3        6\n6  6      1967  Gresham 45.48799 -122.4162   97080         2        3\n  DateListed  DateSold daysOnZillow      homeType lastSoldPrice livingArea\n1  4/26/2021 5/21/2021           25     TOWNHOUSE        315400       1806\n2   3/1/2021 4/23/2021           53 SINGLE_FAMILY        400000       1518\n3  5/24/2021  6/4/2021           11 SINGLE_FAMILY        512000       2724\n4  5/24/2021  6/4/2021           11 SINGLE_FAMILY        348000       1217\n5  5/18/2021  6/1/2021           14     APARTMENT        510000       2400\n6  5/18/2021  6/1/2021           14 SINGLE_FAMILY        404200       1150\n  lotSize  price priceHistory.1.price propertyTaxRate hasCooling hasFireplace\n1    1555 315400               212000            1.12      FALSE         TRUE\n2    3484 400000               375000            1.12       TRUE         TRUE\n3    9583 512000               479000            1.12       TRUE         TRUE\n4   13939 348000               339500            1.12         NA         TRUE\n5    8545 510000               252450            1.12       TRUE           NA\n6    7000 404200               204500            1.12      FALSE         TRUE\n  hasGarage hasHeating hasView ElementarySchooldistance ElementarySchools\n1     FALSE       TRUE   FALSE                      0.4        Elementary\n2     FALSE       TRUE    TRUE                      1.2        Elementary\n3     FALSE       TRUE    TRUE                      0.8        Elementary\n4     FALSE       TRUE   FALSE                      0.8        Elementary\n5     FALSE       TRUE   FALSE                      0.3        Elementary\n6     FALSE       TRUE   FALSE                      0.4        Elementary\n  ElementarySchoolrating MiddleSchooldistance schoolsMiddlelevel\n1                      5                  1.1             Middle\n2                      5                  1.0             Middle\n3                      5                  1.7             Middle\n4                      2                  0.7             Middle\n5                      2                  0.9             Middle\n6                      2                  0.4             Middle\n  MiddleSchoolsrating HighSchooldistance HighSchoollevel HighSchoolRating\n1                   2                2.6            High                3\n2                   2                3.4            High                3\n3                   6                1.4            High                3\n4                   2                3.8            High                3\n5                   6                0.3            High                3\n6                   6                1.4            High                3\n```\n:::\n:::\n\n\n\n\n### Missing data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data <- raw_pdx %>%\n  filter(!is.na(yearBuilt))%>%\n  filter(!is.na(longitude))%>%\n  filter(!is.na(bedrooms))%>%\n  filter(!is.na(daysOnZillow))%>%\n  filter(!is.na(livingArea))%>%\n  filter(!is.na(priceHistory.1.price))%>%\n  filter(!is.na(hasFireplace))%>%\n  filter(!is.na(latitude))%>%\n  filter(!is.na(hasHeating))%>%\n  filter(!is.na(hasCooling))%>%\n  filter(!is.na(bathrooms))%>%\n  filter(!is.na(lotSize))%>%\n  filter(!is.na(propertyTaxRate))%>%\n  filter(!is.na(ElementarySchooldistance))%>%\n  filter(!is.na(MiddleSchooldistance))%>%\n  filter(!is.na(HighSchooldistance))%>%\n  filter(!is.na(ElementarySchoolrating))%>%\n  filter(!is.na(MiddleSchoolsrating))%>%\n  filter(!is.na(HighSchoolRating))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(clean_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       id          yearBuilt             City         latitude    \n Min.   :    1   Min.   :   0   Portland   :5232   Min.   :45.26  \n 1st Qu.: 6207   1st Qu.:1965   Beaverton  :1456   1st Qu.:45.42  \n Median :15156   Median :1989   Hillsboro  :1194   Median :45.47  \n Mean   :13622   Mean   :1981   Lake Oswego: 942   Mean   :45.47  \n 3rd Qu.:20440   3rd Qu.:2003   Tigard     : 913   3rd Qu.:45.52  \n Max.   :25730   Max.   :2021   Gresham    : 845   Max.   :45.62  \n                                (Other)    :3906                  \n   longitude         zipcode        bathrooms        bedrooms     \n Min.   :-123.1   97229  :  834   Min.   : 0.00   Min.   : 0.000  \n 1st Qu.:-122.8   97045  :  713   1st Qu.: 2.00   1st Qu.: 3.000  \n Median :-122.7   97007  :  706   Median : 3.00   Median : 3.000  \n Mean   :-122.7   97086  :  632   Mean   : 2.78   Mean   : 3.568  \n 3rd Qu.:-122.6   97123  :  599   3rd Qu.: 3.00   3rd Qu.: 4.000  \n Max.   :-122.3   97068  :  573   Max.   :10.00   Max.   :10.000  \n                  (Other):10431                                   \n     DateListed          DateSold      daysOnZillow              homeType    \n 8/9/2019 :   71   5/28/2021 :  159   Min.   :  1   APARTMENT        :   38  \n 6/4/2021 :   66   6/30/2021 :  142   1st Qu.: 80   CONDO            :  136  \n 3/30/2021:   65   10/30/2020:  137   Median :192   HOME_TYPE_UNKNOWN:    2  \n 8/6/2019 :   64   7/31/2020 :  128   Mean   :187   SINGLE_FAMILY    :13659  \n 8/19/2019:   62   4/30/2021 :  127   3rd Qu.:294   TOWNHOUSE        :  653  \n 8/23/2019:   60   9/30/2020 :  122   Max.   :422                            \n (Other)  :14100   (Other)   :13673                                          \n lastSoldPrice       livingArea       lotSize             price        \n Min.   :    443   Min.   :  416   Min.   :       0   Min.   :    500  \n 1st Qu.: 450000   1st Qu.: 1664   1st Qu.:    4791   1st Qu.: 450000  \n Median : 551000   Median : 2206   Median :    7405   Median : 551000  \n Mean   : 634458   Mean   : 2399   Mean   :   17065   Mean   : 634827  \n 3rd Qu.: 710000   3rd Qu.: 2892   3rd Qu.:   10018   3rd Qu.: 710000  \n Max.   :6300000   Max.   :14014   Max.   :18992160   Max.   :6300000  \n                                                                       \n priceHistory.1.price propertyTaxRate hasCooling      hasFireplace   \n Min.   :    895      Min.   :1.010   Mode :logical   Mode :logical  \n 1st Qu.: 415000      1st Qu.:1.080   FALSE:807       FALSE:645      \n Median : 525000      Median :1.120   TRUE :13681     TRUE :13843    \n Mean   : 594080      Mean   :1.113                                  \n 3rd Qu.: 679992      3rd Qu.:1.130                                  \n Max.   :6888000      Max.   :1.130                                  \n                                                                     \n hasGarage       hasHeating       hasView        ElementarySchooldistance\n Mode :logical   Mode :logical   Mode :logical   Min.   :0.0000          \n FALSE:14150     FALSE:24        FALSE:8574      1st Qu.:0.4000          \n TRUE :338       TRUE :14464     TRUE :5914      Median :0.6000          \n                                                 Mean   :0.8057          \n                                                 3rd Qu.:1.0000          \n                                                 Max.   :9.4000          \n                                                                         \n  ElementarySchools ElementarySchoolrating MiddleSchooldistance\n           :    0   7      :2862           Min.   : 0.000      \n Elementary:13077   5      :2359           1st Qu.: 0.800      \n Primary   : 1411   6      :2323           Median : 1.300      \n                    8      :1606           Mean   : 1.546      \n                    3      :1368           3rd Qu.: 2.100      \n                    4      :1332           Max.   :11.900      \n                    (Other):2638                               \n  schoolsMiddlelevel MiddleSchoolsrating HighSchooldistance HighSchoollevel\n           :    0    5      :2347        Min.   : 0.100         :    0     \n Elementary:    3    8      :2262        1st Qu.: 1.000     High:14488     \n High      :    0    3      :2238        Median : 1.700                    \n Middle    :14485    6      :2104        Mean   : 1.911                    \n                     7      :1655        3rd Qu.: 2.500                    \n                     4      :1595        Max.   :10.800                    \n                     (Other):2287                                          \n HighSchoolRating\n 5      :3804    \n 8      :2365    \n 3      :1962    \n 6      :1787    \n 9      :1746    \n 4      :1230    \n (Other):1594    \n```\n:::\n:::\n\n\n\n\n## Take a look at the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_data %>% \n  count(price_category, \n        name =\"total\") %>%\n  mutate(percent = total/sum(total)*100,\n         percent = round(percent, 2)) %>%\n gt() %>%\n  tab_header(\n    title = \"Portland, OR and its Metropolitan Area Median House Prices\",\n    subtitle = \"Above and below 551,000$\"\n  ) %>%\n  cols_label(\n    price_category = \"Price\",\n    total = \"Total\",\n    percent = \"Percent\"\n  ) %>% \n  fmt_number(\n    columns = vars(total),\n    suffixing = TRUE\n  )  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Since gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\nSince gt v0.3.0, `columns = vars(...)` has been deprecated.\n• Please use `columns = c(...)` instead.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"rngvrbbdql\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#rngvrbbdql .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#rngvrbbdql .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#rngvrbbdql .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#rngvrbbdql .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#rngvrbbdql .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#rngvrbbdql .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#rngvrbbdql .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#rngvrbbdql .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#rngvrbbdql .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#rngvrbbdql .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#rngvrbbdql .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#rngvrbbdql .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#rngvrbbdql .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#rngvrbbdql .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rngvrbbdql .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#rngvrbbdql .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#rngvrbbdql .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rngvrbbdql .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#rngvrbbdql .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rngvrbbdql .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#rngvrbbdql .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rngvrbbdql .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#rngvrbbdql .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#rngvrbbdql .gt_left {\n  text-align: left;\n}\n\n#rngvrbbdql .gt_center {\n  text-align: center;\n}\n\n#rngvrbbdql .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#rngvrbbdql .gt_font_normal {\n  font-weight: normal;\n}\n\n#rngvrbbdql .gt_font_bold {\n  font-weight: bold;\n}\n\n#rngvrbbdql .gt_font_italic {\n  font-style: italic;\n}\n\n#rngvrbbdql .gt_super {\n  font-size: 65%;\n}\n\n#rngvrbbdql .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#rngvrbbdql .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#rngvrbbdql .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#rngvrbbdql .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#rngvrbbdql .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#rngvrbbdql .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#rngvrbbdql .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  <thead class=\"gt_header\">\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_title gt_font_normal\" style>Portland, OR and its Metropolitan Area Median House Prices</td>\n    </tr>\n    <tr>\n      <td colspan=\"3\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Above and below 551,000$</td>\n    </tr>\n  </thead>\n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Price\">Price</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total\">Total</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Percent\">Percent</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"price_category\" class=\"gt_row gt_center\">above</td>\n<td headers=\"total\" class=\"gt_row gt_right\">7.25K</td>\n<td headers=\"percent\" class=\"gt_row gt_right\">50.02</td></tr>\n    <tr><td headers=\"price_category\" class=\"gt_row gt_center\">below</td>\n<td headers=\"total\" class=\"gt_row gt_right\">7.24K</td>\n<td headers=\"percent\" class=\"gt_row gt_right\">49.98</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqmplot(x = longitude, \n       y = latitude, \n       data = clean_data, \n       geom = \"point\", \n       color = price_category, \n       alpha = 0.4) +\n  scale_alpha(guide = 'none')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Using `zoom = 10`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\n```\n:::\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhouses_pdx <-\n  clean_data %>% \n  select( # select our predictors\n    longitude, \n    latitude, \n    price_category,\n    bathrooms, \n    yearBuilt, \n    homeType,\n    bedrooms, \n    livingArea, \n    lotSize,\n    MiddleSchooldistance,\n    ElementarySchooldistance,\n    HighSchooldistance)\n\nglimpse(houses_pdx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 14,488\nColumns: 12\n$ longitude                <dbl> -122.4418, -122.4532, -122.4444, -122.4162, -…\n$ latitude                 <dbl> 45.54357, 45.54758, 45.48823, 45.48799, 45.49…\n$ price_category           <fct> below, below, below, below, below, below, bel…\n$ bathrooms                <dbl> 3.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, …\n$ yearBuilt                <dbl> 2007, 2001, 1982, 1967, 1978, 2018, 2006, 201…\n$ homeType                 <fct> TOWNHOUSE, SINGLE_FAMILY, SINGLE_FAMILY, SING…\n$ bedrooms                 <dbl> 3, 3, 4, 3, 3, 4, 3, 3, 4, 4, 3, 2, 4, 3, 4, …\n$ livingArea               <dbl> 1806, 1518, 2724, 1150, 2036, 1947, 1548, 220…\n$ lotSize                  <dbl> 1555, 3484, 9583, 7000, 6969, 4791, 5009, 522…\n$ MiddleSchooldistance     <dbl> 1.1, 1.0, 1.7, 0.4, 2.1, 2.5, 0.5, 1.8, 0.3, …\n$ ElementarySchooldistance <dbl> 0.4, 1.2, 0.8, 0.4, 1.0, 0.3, 0.5, 1.0, 0.1, …\n$ HighSchooldistance       <dbl> 2.6, 3.4, 1.4, 1.4, 1.4, 2.2, 1.5, 1.4, 0.9, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_long <- houses_pdx %>% \n  select(-longitude,-latitude, -homeType, -yearBuilt, -lotSize)%>%\n    pivot_longer(!price_category, names_to = \"features\", values_to = \"values\")\n\n\n# Print the first 10 rows\npdx_long %>% \n  slice_head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 3\n   price_category features                 values\n   <fct>          <chr>                     <dbl>\n 1 below          bathrooms                   3  \n 2 below          bedrooms                    3  \n 3 below          livingArea               1806  \n 4 below          MiddleSchooldistance        1.1\n 5 below          ElementarySchooldistance    0.4\n 6 below          HighSchooldistance          2.6\n 7 below          bathrooms                   3  \n 8 below          bedrooms                    3  \n 9 below          livingArea               1518  \n10 below          MiddleSchooldistance        1  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_light())\n\n# Make a box plot for each predictor feature\npdx_long %>% \n  ggplot(mapping = aes(x = price_category, y = values, fill = features)) +\n  geom_boxplot() + \n  facet_wrap(~ features, scales = \"free\", ncol = 4) +\n  scale_color_viridis_d(option = \"plasma\", end = .7) +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Data Splitting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fix the random numbers by setting the seed \n# This enables the analysis to be reproducible \nset.seed(504)\n\n# Put 3/4 of the data into the training set \ndata_split <- initial_split(houses_pdx, \n                           prop = 3/4)\n\n# Create dataframes for the two sets:\ntrain_data <- training(data_split) \ntest_data <- testing(data_split)\n```\n:::\n\n\n### Validaton Set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhouse_folds <-\n vfold_cv(train_data, \n          v = 5, \n          strata = price_category) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_rec <-\n  recipe(price_category ~ .,\n         data = train_data) %>%\n  update_role(longitude, latitude, \n              new_role = \"ID\") %>% \n  \n  step_naomit(everything(), skip = TRUE) %>% \n  \n  step_novel(all_nominal(), -all_outcomes()) %>% # converts all nominal variables to factors and takes care of other issues related to categorical variables.\n  \n  step_normalize(all_numeric(), -all_outcomes(), \n                 -longitude, -latitude) %>% # step_normalize() normalizes (center and scales) the numeric variables to have a standard deviation of one and a mean of zero\n  \n  step_dummy(all_nominal(), -all_outcomes()) %>% #converts our factor columns into numeric binary (0 and 1) variables.\n  \n  step_zv(all_numeric(), -all_outcomes()) %>% ## step_zv(): removes any numeric variables that have zero variance.\n  \n  step_corr(all_predictors(), threshold = 0.7, method = \"spearman\") # step_corr(): will remove predictor variables that have large correlations with other predictor variables.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdx_rec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   variable                 type      role      source  \n   <chr>                    <list>    <chr>     <chr>   \n 1 longitude                <chr [2]> ID        original\n 2 latitude                 <chr [2]> ID        original\n 3 bathrooms                <chr [2]> predictor original\n 4 yearBuilt                <chr [2]> predictor original\n 5 homeType                 <chr [3]> predictor original\n 6 bedrooms                 <chr [2]> predictor original\n 7 livingArea               <chr [2]> predictor original\n 8 lotSize                  <chr [2]> predictor original\n 9 MiddleSchooldistance     <chr [2]> predictor original\n10 ElementarySchooldistance <chr [2]> predictor original\n11 HighSchooldistance       <chr [2]> predictor original\n12 price_category           <chr [3]> outcome   original\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_data <- \n  pdx_rec %>% # use the recipe object\n  prep() %>% # perform the recipe on training data\n  juice() # extract only the preprocessed dataframe \n```\n:::\n\n\n## The Model- Logistic regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_spec <- # your model specification\n  logistic_reg() %>%  # model type\n  set_engine(engine = \"glm\") %>%  # model engine\n  set_mode(\"classification\") # model mode\n\n# Show your model specification\nlog_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_wflow <- # new workflow object\n workflow() %>% # use workflow function\n add_recipe(pdx_rec) %>%   # use the new recipe\n add_model(log_spec)   # add your model spec\n\npdx_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_naomit()\n• step_novel()\n• step_normalize()\n• step_dummy()\n• step_zv()\n• step_corr()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save model coefficients for a fitted model object from a workflow\n\nget_model <- function(x) {\n  pull_workflow_fit(x) %>% tidy()\n}\n\n# same as before with one exception\nlog_res_2 <- \n  pdx_wflow %>% \n  fit_resamples(\n    resamples = house_folds, \n    metrics = metric_set(\n      recall, precision, f_meas, \n      accuracy, kap,\n      roc_auc, sens, spec),\n      control = control_resamples(\n      save_pred = TRUE,\n      extract = get_model) # use extract and our new function\n    ) \n\n\n## All of the results can be flattened and collected using:\n\n\n\nall_coef <- map_dfr(log_res_2$.extracts, ~ .x[[1]][[1]])\nfilter(all_coef, term == \"bedrooms\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n  term     estimate std.error statistic  p.value\n  <chr>       <dbl>     <dbl>     <dbl>    <dbl>\n1 bedrooms   0.0748    0.0424      1.76 0.0777  \n2 bedrooms   0.129     0.0433      2.99 0.00284 \n3 bedrooms   0.116     0.0423      2.74 0.00623 \n4 bedrooms   0.118     0.0425      2.78 0.00550 \n5 bedrooms   0.147     0.0430      3.42 0.000618\n```\n:::\n:::\n\n\n### Performance metrics\n\nShow performance for every single fold:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_res_2 %>%  collect_metrics(summarize = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 5\n   id    .metric   .estimator .estimate .config             \n   <chr> <chr>     <chr>          <dbl> <chr>               \n 1 Fold1 recall    binary         0.788 Preprocessor1_Model1\n 2 Fold1 precision binary         0.834 Preprocessor1_Model1\n 3 Fold1 f_meas    binary         0.810 Preprocessor1_Model1\n 4 Fold1 accuracy  binary         0.816 Preprocessor1_Model1\n 5 Fold1 kap       binary         0.631 Preprocessor1_Model1\n 6 Fold1 sens      binary         0.788 Preprocessor1_Model1\n 7 Fold1 spec      binary         0.843 Preprocessor1_Model1\n 8 Fold1 roc_auc   binary         0.902 Preprocessor1_Model1\n 9 Fold2 recall    binary         0.783 Preprocessor1_Model1\n10 Fold2 precision binary         0.824 Preprocessor1_Model1\n# … with 30 more rows\n```\n:::\n:::\n\n\n### Collect predictions\n\nTo obtain the actual model predictions, we use the function collect_predictions and save the result as log_pred:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred <- \n  log_res_2 %>%\n  collect_predictions()\n\n\nlog_pred %>% \n  conf_mat(price_category, .pred_class) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Truth\nPrediction above below\n     above  4344   856\n     below  1093  4573\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  conf_mat(price_category, .pred_class) %>% \n  autoplot(type = \"heatmap\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### ROC Curve\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_pred %>% \n  group_by(id) %>% # id contains our folds\n  roc_curve(price_category, .pred_above) %>% \n  autoplot()+\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\nℹ The deprecated feature was likely used in the yardstick package.\n  Please report the issue at <https://github.com/tidymodels/yardstick/issues>.\n```\n:::\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## Use the workflow to train our model\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_fit <- fit(pdx_wflow, train_data)\n```\n:::\n\n\nThis allows us to use the model trained by this workflow to predict labels for our test set, and compare the performance metrics with the basic model we created previously.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdx_fit %>% ## display results\npull_workflow_fit() %>%\ntidy()%>%\n  filter(p.value < 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  term                 estimate std.error statistic  p.value\n  <chr>                   <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)           -0.426     0.0296    -14.4  5.43e-47\n2 yearBuilt              0.221     0.0482      4.59 4.49e- 6\n3 bedrooms               0.119     0.0381      3.12 1.82e- 3\n4 livingArea            -2.88      0.0689    -41.8  0       \n5 lotSize               -0.0448    0.0202     -2.21 2.68e- 2\n6 MiddleSchooldistance  -0.171     0.0310     -5.52 3.33e- 8\n7 HighSchooldistance     0.0805    0.0303      2.66 7.86e- 3\n8 homeType_TOWNHOUSE     0.998     0.179       5.59 2.24e- 8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vip)\n\npdx_fit %>%\nextract_fit_parsnip() %>%\n   vip(num_features = 5)+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nThe two most important predictors in whether the median house value is above or below 551,000 dollars were the Living Area and the home type: Townhouse\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make predictions on the test set\npred_results <- test_data %>% \n  select(price_category) %>% \n  bind_cols(pdx_fit %>% \n              predict(new_data = test_data)) %>% \n  bind_cols(pdx_fit %>% \n              predict(new_data = test_data, type = \"prob\"))\n\n# Print the results\npred_results %>% \n  slice_head(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   price_category .pred_class .pred_above .pred_below\n1           below       above  0.79554296   0.2044570\n2           below       below  0.26469350   0.7353065\n3           below       below  0.47600771   0.5239923\n4           below       below  0.02353063   0.9764694\n5           below       below  0.06272184   0.9372782\n6           below       below  0.10491967   0.8950803\n7           below       below  0.06923625   0.9307637\n8           below       below  0.03314398   0.9668560\n9           below       below  0.04580355   0.9541965\n10          below       above  0.83998089   0.1600191\n```\n:::\n:::\n\n\nLet's take a look at the confusion matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_results%>% \n  conf_mat(price_category, .pred_class) %>% \n  autoplot(type = \"heatmap\")+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n# Evaluate other desired metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\neval_metrics <- metric_set(ppv, recall, accuracy, f_meas)\neval_metrics(data = pred_results, truth = price_category, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 ppv      binary         0.820\n2 recall   binary         0.792\n3 accuracy binary         0.809\n4 f_meas   binary         0.806\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npred_results %>% \n  roc_auc(price_category, .pred_above)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.895\n```\n:::\n:::\n\n\n### Make a roc_chart\n\nLet's create the ROC curve. Again, since the event we are predicting is the first level in the price_category factor (\"above\"), we provide roc_curve() with the relevant class probability .pred_above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred_results %>% \n  roc_curve(truth = price_category, .pred_above) %>% \n  autoplot()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](RegressionModel_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## Reference\n\nTidymodels- https://www.tidymodels.org/\n",
    "supporting": [
      "RegressionModel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}