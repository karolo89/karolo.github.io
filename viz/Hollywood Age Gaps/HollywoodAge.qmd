---
title: "Hollywood Age Gaps"
author: "Karol Orozco"
date: today
image: "tt_logo.png"
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(warning=FALSE, message=FALSE)

library(tidyverse)
library(dplyr)
library(tidytuesdayR)
library(here)
library(showtext)
library(janitor)

library(camcorder)
library(ggtext)
library(glue)
library(patchwork)
library(gghighlight)

```


```{r include=FALSE, warning=FALSE, message=FALSE}

tuesdata <- tidytuesdayR::tt_load('2023-02-14')
tuesdata <- tidytuesdayR::tt_load(2023, week = 7)

age_gaps <- tuesdata$age_gaps

age_gaps <- read_csv(
  "http://hollywoodagegap.com/movies.csv",
) |> 
  clean_names()

glimpse(age_gaps)

# Quickly check that the columns make sense.
length(vctrs::vec_cast(age_gaps$release_year, integer())) == nrow(age_gaps)
length(vctrs::vec_cast(age_gaps$age_difference, integer())) == nrow(age_gaps)
unique(age_gaps$actor_1_gender)
!any(is.na(as.Date(age_gaps$actor_1_birthdate)))
length(vctrs::vec_cast(age_gaps$actor_1_age, integer())) == nrow(age_gaps)
unique(age_gaps$actor_2_gender)
!any(is.na(as.Date(age_gaps$actor_2_birthdate)))
length(vctrs::vec_cast(age_gaps$actor_2_age, integer())) == nrow(age_gaps)

# Formally set the dates to dates.
age_gaps <- age_gaps |> 
  mutate(
    across(
      ends_with("birthdate"),
      as.Date
    )
  )

# Try to get a better understanding of the "gender" columns.
count(age_gaps, actor_1_gender)
count(age_gaps, actor_2_gender)

# The order of the characters doesn't seem to be consistent
age_gaps |> 
  summarize(
    p_1_older = mean(actor_1_age > actor_2_age),
    p_1_male = mean(actor_1_gender == "man"),
    p_1_female_2_male = mean(actor_1_gender == "woman" & actor_2_gender == "man"),
    p_1_first_alpha = mean(actor_1_name < actor_2_name)
  )

# For the most part, they put the man first if there's a man in the couple. It
# doesn't look like there's a strict rule, though. But beware: Some movies have
# more than 1 couple! Let's use all that to rebuild the data, always putting the
# older character first.
age_gaps <- age_gaps |> 
  mutate(
    couple_number = row_number(),
    .by = "movie_name"
  ) |> 
  pivot_longer(
    cols = starts_with(c("actor_1_", "actor_2_")),
    names_to = c(NA, NA, ".value"),
    names_sep = "_"
  ) |> 
  # Put the older actor first.
  arrange(desc(age_difference), movie_name, birthdate) |> 
  # While we have it pivoted, correct Elliot Page's name. I don't know if other
  # actors are similarly deadnamed, but at least we can fix this one. Note that
  # the *characters* played by Elliot in these particular films were women, so
  # I'll leave the gender as-is.
  mutate(
    name = case_match(
      name,
      "Ellen Page" ~ "Elliot Page",
      .default = name
    )
  ) |>
  mutate(
    position = row_number(),
    .by = c("movie_name", "couple_number")
  ) |> 
  pivot_wider(
    names_from = "position",
    names_glue = "actor_{position}_{.value}",
    values_from = c("name", "gender", "birthdate", "age")
  )

# The gender isn't really the actor so much as it is the character. Let's
# correct that.
age_gaps <- age_gaps |> 
  rename(
    "character_1_gender" = "actor_1_gender",
    "character_2_gender" = "actor_2_gender"
  )


# Save the data.
write_csv(
  age_gaps,
  here::here(
    "data", "2023", "2023-02-14",
    "age_gaps.csv"
  )
)


```

```{r}
summary(age_gaps)
```

```{r}
# data wrangling
p1 <- plot_data <- age_gaps |> 
  mutate(rel_type = case_when(
    (character_1_gender == "woman" & character_2_gender == "man") ~ "Older Woman, Younger Man",
    (character_1_gender == "man" & character_2_gender == "woman") ~ "Older Man, Younger Woman",
    (character_1_gender == "woman" & character_2_gender == "woman") ~ "Both Women",
    (character_1_gender == "man" & character_2_gender == "man") ~ "Both Men" 
  )) |> 
  select(release_year, age_difference, rel_type) 

 ggplot(data = plot_data,
       mapping = aes(x = release_year,
                     y = age_difference)) +
  geom_point(colour = alpha("#508080", 0.5)) +
  geom_smooth(colour = "#E30B5C", se = FALSE) +
  labs(y = "Age gap (years)") +
  theme_minimal()
 
 # faceted plot
p2 <- ggplot(data = plot_data,
       mapping = aes(x = release_year,
                     y = age_difference, 
                     colour = rel_type)) +
  geom_point(colour = alpha("#E30B5C", 0.5),
             size = 0.3) +
  gghighlight(use_direct_label = F) +
  facet_wrap(~rel_type, ncol = 2, nrow = 2,
             labeller = labeller(rel_type = label_wrap_gen(18))) +
  labs(y = "Age gap (years)") +
  theme_minimal()

p1

p2

```



## Reference

The data this week comes from Hollywood Age Gap via Data Is Plural.

Thomas Mock (2022). Tidy Tuesday: A weekly data project aimed at the R ecosystem.[GitHub](https://github.com/rfordatascience/tidytuesday)
